<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->

// graphics chain for vehicle platform
// position variants are 'default', 'first', 'last', 'middle', etc, and are dependent on consist_ruleset
<tal:position_variants repeat="position_variant consist.gestalt_graphics.position_variants">
    spriteset(${vehicle.id}_ss_${position_variant}_unflipped, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', 'unflipped', 10 + (repeat.position_variant.index * 60))}
    }
    spriteset(${vehicle.id}_ss_${position_variant}_flipped, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('reversed', 'flipped', 10 + (repeat.position_variant.index * 60) + 30)}
    }

    <!--! handle user flipped state -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_${position_variant}, vehicle_is_flipped) {
        1: return ${vehicle.id}_ss_${position_variant}_flipped;
        return ${vehicle.id}_ss_${position_variant}_unflipped;
    }
</tal:position_variants>

<tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == '1_unit_sets'">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point, 0) {
        return ${vehicle.id}_switch_graphics_platform_default;
    }
</tal:position_ruleset>

<tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == '2_unit_sets'">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point, switch_graphics_intermodal_platform_ruleset_2_unit_sets()) {
        0: return ${vehicle.id}_switch_graphics_platform_default;
        1: return ${vehicle.id}_switch_graphics_platform_first;
        2: return ${vehicle.id}_switch_graphics_platform_last;
        return ${vehicle.id}_switch_graphics_platform_default;
    }
</tal:position_ruleset>

<tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == '4_unit_sets'">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point, switch_graphics_intermodal_platform_ruleset_4_unit_sets()) {
        0: ${vehicle.id}_switch_graphics_platform_default;
        1: return ${vehicle.id}_switch_graphics_platform_first;
        2: return ${vehicle.id}_switch_graphics_platform_last;
        3: return ${vehicle.id}_switch_graphics_platform_middle;
        return ${vehicle.id}_switch_graphics_platform_default;
    }
</tal:position_ruleset>

<!--! load state is assumed (for simplicity) to be all or nothing - any cargo = full load of containers -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers_check_cargo, cargo_count) {
        0: return ss_spritelayer_cargos_intermodal_cars_empty;
    return switch_spritelayer_cargos_intermodal_cars_${consist.platform_type}_${4 * vehicle.vehicle_length}px;
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_containers, STORE_TEMP(switch_intermodal_by_company_colour_1cc_to_1cc(), 0x100)) {
    return ${vehicle.id}_switch_graphics_containers_check_cargo;
}

// switch layers: base platform / containers
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, getbits(extra_callback_info1, 8, 8)) {
    0: return ${vehicle.id}_switch_graphics_platform_position_in_consist_entry_point;
    1: return ${vehicle.id}_switch_graphics_containers;
}


// buy menu graphics chain
spriteset(${vehicle.id}_ss_vehicle_purchase, "${graphics_path}${consist.id}.png") {
    spriteset_template_purchase_${vehicle.id}(10)
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_ss_vehicle_purchase;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<!--! dedicated colour remapping of second livery, with user flip support but, no randomisation -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_is_flipped) {
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

