<!--! For some randomised cases, we want runs of the same 'random' vehicle for count n (usually between 2 and 5).
      Then we switch to another 'random' vehicle.
      This achieved using 64 deterministic random maps, which are generated by the compile using a deterministic seed.
      Each map has 64 entries, corresponding to an offset which is used to select a set of random bits from the lead engine.
      -->
<tal:deterministic_random_maps repeat="random_map_type pseudo_random_vehicle_maps.map_configurations.keys()">
    <tal:deterministic_random_maps_by_type repeat="random_map pseudo_random_vehicle_maps.get_deterministic_random_vehicle_maps(random_map_type)">
        <!--! (position_in_consist -1) here because we can assume there's at least one engine ...
               ...we don't try to do anything fancier than that, but this prevents high incidence of a run of just 2 at start of wagons -->
        switch (FEAT_TRAINS, SELF, switch_deterministic_random_vehicle_map_${random_map_type}_${repeat.random_map.index}, (position_in_consist - 1) % 64) {
            <tal:map_items repeat="map_item random_map">
                ${repeat.map_item.index}: ${map_item};
            </tal:map_items>
        }
    </tal:deterministic_random_maps_by_type>

    <!--! pick 6 bits to choose 1 of 64 maps; the bits do possibly overlap with the variant selection bits in 1 of 10 cases, but we'll live with that -->
    switch (FEAT_TRAINS, PARENT, pseudo_random_value_from_deterministic_random_map_${random_map_type}, getbits(var[0x5F, 8, 0x00FFFFFF], 0, 6)) {
        <tal:map_indexes repeat="map_index range(64)">
            ${map_index}: switch_deterministic_random_vehicle_map_${random_map_type}_${map_index};
        </tal:map_indexes>
    }

</tal:deterministic_random_maps>
