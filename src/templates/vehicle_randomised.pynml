<!--! as of Sept 2024, this was simplified to always use python generated pseudo-random maps -->

<tal:unit_variants repeat="unit_variant vehicle.unit_variants">
    <tal:optimise_wagon_randomisation_candidates define="randomisation_candidates consist.roster.get_wagon_randomisation_candidates(unit_variant.buyable_variant);">
        switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_graphics_variant_choose_randomised_wagon, [
                                    pseudo_random_value_from_deterministic_random_map_${consist.gestalt_graphics.random_vehicle_map_type}()
                                    <!--! modulo to cap the value selected (range 64) to the range of actual candidates -->
                                    %
                                    ${len(consist.roster.get_wagon_randomisation_candidates(unit_variant.buyable_variant))}
            ]) {
            <tal:randomisation_candidates repeat="randomisation_candidate randomisation_candidates">
                ${repeat.randomisation_candidate.index}: ${repeat.randomisation_candidate.index};
            </tal:randomisation_candidates>
        }
        <!--! note that the random chain is used by both graphics and colour mapping chains -->

        switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_graphics_variant, ${unit_variant.id}_switch_graphics_variant_choose_randomised_wagon()) {
            <tal:randomisation_candidates repeat="randomisation_candidate randomisation_candidates">
                ${repeat.randomisation_candidate.index}: ${randomisation_candidate.unit.id}_switch_graphics;
            </tal:randomisation_candidates>
        }

        // buy menu graphics chain
        spriteset(${unit_variant.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        <!--! handle colour mapping which can vary per buyable variant
              note that we have to make the same random choice here as the graphics chain, so we delegate to a shared procedure -->
        <!--! there is some faffy optimisation of colour mapping via a lookup table to reduce parameterised procedure calls (which are expensive in grf size) -->
        switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_colour_mapping_variant_get_colour_set_num_from_random_candidates, ${unit_variant.id}_switch_graphics_variant_choose_randomised_wagon()) {
            <tal:randomisation_candidates repeat="randomisation_candidate randomisation_candidates">
                ${repeat.randomisation_candidate.index}: return ${randomisation_candidate.get_wagon_recolour_colour_set_num()};
            </tal:randomisation_candidates>
        }
        switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_colour_mapping_variant, 0) {
            return switch_wagon_recolour_sets(${unit_variant.id}_switch_colour_mapping_variant_get_colour_set_num_from_random_candidates());
        }
        <!--! purchase colour mapping is just taken from first candidate -->
        switch (FEAT_TRAINS, SELF, ${unit_variant.id}_switch_colour_mapping_variant_purchase, 0) {
            return switch_wagon_recolour_sets(
                ${randomisation_candidates[0].get_wagon_recolour_colour_set_num(context="purchase")}
            );
        }
    </tal:optimise_wagon_randomisation_candidates>
</tal:unit_variants>

<!--! note that we provide '_switch_graphics' not '_switch_graphics_vehicle' as there are no precursor graphics entry switches for randomised wagons
      we'll ultimately chain instead to the selected candidate's graphics entry switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: ${unit_variant.id}_switch_graphics_variant;
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}
<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: ${unit_variant.id}_ss_purchase;
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: ${unit_variant.id}_switch_colour_mapping_variant;
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: ${unit_variant.id}_switch_colour_mapping_variant_purchase;
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

<!--! note that graphics_entry_switches.pynml shouldn't be called as a macro here
      randomised vehicles chain via the selected candidate's graphics entry switch, so they don't need their own graphics entry switch  -->

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
